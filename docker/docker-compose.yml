version: '3.8'

x-project:
  name: MemeMorium Stack

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka_network

  mysql:
    image: mysql:latest
    container_name: memoriumdb
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: memoriumdb
    ports:
      - "3308:3306" # host port : container port
    networks:
      - order_network
    healthcheck: # need to allow mysql some time to initialize for other services to connect to it
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "--silent" ]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service:
    build:
      context: ../order_service
    ports:
      - "9004:9004"
    depends_on:
      mysql: # only connect once mysql is fully initialized
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://memoriumdb:3306/memoriumdb
      - DB_USERNAME=root
      - DB_PASSWORD=root
    networks:
      - order_network

#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    depends_on:
#      - kafka
#    ports:
#      - "8090:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#    networks:
#      - kafka_network

  producer:
    build:
      context: ../order-producer
    ports:
      - "9003:9003"
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - kafka_network

  consumer:
    build:
      context: ../order-consumer
    ports:
      - "9002:9002"
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge
  order_network:
    driver: bridge